{
  "openapi": "3.0.0",
  "paths": {
    "/api/v1": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": "API is healthy and reachable.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "status": "ok",
                    "message": "CurioPay API is healthy.",
                    "timestamp": "2024-05-01T12:00:00.000Z"
                  }
                }
              }
            }
          }
        },
        "summary": "Health check endpoint",
        "tags": ["app"],
        "security": [{ "JWT-auth": [] }]
      }
    },
    "/api/v1/users": {
      "post": {
        "operationId": "UsersController_createUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RegisterDto" }
            }
          }
        },
        "responses": {
          "201": { "description": "User created successfully" },
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Admin access required" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Create a new user (Admin only)",
        "tags": ["users"]
      },
      "get": {
        "operationId": "UsersController_getAllUsers",
        "parameters": [],
        "responses": {
          "200": { "description": "Returns list of users" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Admin access required" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get all users (Admin only)",
        "tags": ["users"]
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "operationId": "UsersController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Returns the user." },
          "404": { "description": "User not found." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get user by ID (Admin only)",
        "tags": ["users"]
      }
    },
    "/api/v1/users/{id}/role": {
      "patch": {
        "operationId": "UsersController_updateUserRole",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateUserRoleDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "User role updated successfully" },
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Admin access required" },
          "404": { "description": "User not found" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Update user role (Admin only)",
        "tags": ["users"]
      }
    },
    "/api/v1/users/{id}/toggle-active": {
      "patch": {
        "operationId": "UsersController_toggleActive",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "User status has been toggled successfully."
          },
          "404": { "description": "User not found." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Toggle user active status",
        "tags": ["users"]
      }
    },
    "/api/v1/users/me/profile": {
      "get": {
        "operationId": "UsersController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns the current user profile with decrypted data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponseDto"
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get current user profile",
        "tags": ["users"]
      }
    },
    "/api/v1/users/me/delete-account": {
      "delete": {
        "operationId": "UsersController_deleteAccount",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DeleteAccountDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "Account successfully deleted." },
          "400": {
            "description": "Invalid request or confirmation not provided."
          },
          "401": { "description": "Invalid password or email not verified." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Delete current user account and all associated data",
        "tags": ["users"]
      }
    },
    "/api/v1/user-preferences": {
      "get": {
        "operationId": "UserPreferencesController_getUserPreferences",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns user preferences",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPreferencesResponseDto"
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get user preferences",
        "tags": ["user-preferences"]
      },
      "patch": {
        "operationId": "UserPreferencesController_updateUserPreferences",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserPreferencesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updates user preferences",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPreferencesResponseDto"
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Update user preferences",
        "tags": ["user-preferences"]
      }
    },
    "/api/v1/user-preferences/toggle-ai-features": {
      "get": {
        "operationId": "UserPreferencesController_toggleAiFeatures",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Toggles AI features",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPreferencesResponseDto"
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Toggle AI features",
        "tags": ["user-preferences"]
      }
    },
    "/api/v1/user-preferences/options": {
      "get": {
        "operationId": "UserPreferencesController_getPreferenceOptions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns all available options for preferences",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currencies": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "code": { "type": "string" },
                          "symbol": { "type": "string" },
                          "name": { "type": "string" }
                        }
                      }
                    },
                    "languages": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "code": { "type": "string" },
                          "name": { "type": "string" }
                        }
                      }
                    },
                    "themes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "name": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get preference options",
        "tags": ["user-preferences"]
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LoginDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "description": "JWT token to be used for authenticated requests. Extended expiration if rememberMe is true."
                    },
                    "requireMfa": {
                      "type": "boolean",
                      "example": "false",
                      "description": "Whether MFA verification is required to complete login"
                    },
                    "tempToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1...",
                      "description": "Temporary token to be used for MFA verification"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "email": { "type": "string" },
                        "firstName": { "type": "string" },
                        "lastName": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Invalid credentials" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Login user",
        "tags": ["auth"]
      }
    },
    "/api/v1/auth/login/mfa/complete": {
      "post": {
        "operationId": "AuthController_completeLoginWithMfa",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteLoginWithMfaDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MFA verification successful and login completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "description": "JWT token to be used for authenticated requests"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "email": { "type": "string" },
                        "firstName": { "type": "string" },
                        "lastName": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Invalid MFA code or token" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Complete login with MFA verification",
        "tags": ["auth"]
      }
    },
    "/api/v1/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RegisterDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "description": "JWT token for the newly registered user"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "email": { "type": "string" },
                        "firstName": { "type": "string" },
                        "lastName": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid input" },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          },
          "409": { "description": "Email already registered" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Register new user",
        "tags": ["auth"]
      }
    },
    "/api/v1/auth/password-reset/request": {
      "post": {
        "operationId": "AuthController_requestPasswordReset",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPasswordResetDto"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Reset instructions sent" },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Request password reset",
        "tags": ["auth"]
      }
    },
    "/api/v1/auth/password-reset/reset": {
      "post": {
        "operationId": "AuthController_resetPassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ResetPasswordDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "Password reset successful" },
          "400": { "description": "Invalid or expired token" },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Reset password using token",
        "tags": ["auth"]
      }
    },
    "/api/v1/auth/mfa/generate": {
      "get": {
        "operationId": "AuthController_generateMfaSecret",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns MFA secret and QR code",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "secret": { "type": "string" },
                    "qrCode": { "type": "string" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Generate MFA secret and QR code",
        "tags": ["auth"]
      }
    },
    "/api/v1/auth/mfa/enable": {
      "post": {
        "operationId": "AuthController_enableMfa",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EnableMfaDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "MFA enabled successfully" },
          "400": { "description": "Invalid MFA code" },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Enable MFA",
        "tags": ["auth"]
      }
    },
    "/api/v1/auth/mfa/verify": {
      "post": {
        "operationId": "AuthController_verifyMfa",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VerifyMfaDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "MFA code verified" },
          "400": { "description": "Invalid MFA code" },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Verify MFA code",
        "tags": ["auth"]
      }
    },
    "/api/v1/auth/mfa/disable": {
      "post": {
        "operationId": "AuthController_disableMfa",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DisableMfaDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "MFA disabled successfully" },
          "400": { "description": "Invalid request" },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Disable MFA",
        "tags": ["auth"]
      }
    },
    "/api/v1/auth/email/request-verification": {
      "post": {
        "description": "Sends a verification email if the account exists and is not already verified",
        "operationId": "AuthController_requestEmailVerification",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestEmailVerificationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "verified": { "type": "boolean", "example": false },
                    "message": { "type": "string" },
                    "verifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Request email verification for any email address (public)",
        "tags": ["auth"]
      }
    },
    "/api/v1/auth/email/request-verification/current": {
      "post": {
        "description": "Sends a verification email only if the current user's email is not already verified",
        "operationId": "AuthController_requestVerificationForCurrentUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "verified": { "type": "boolean", "example": false },
                    "message": { "type": "string" },
                    "verifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Request email verification for the current authenticated user",
        "tags": ["auth"]
      }
    },
    "/api/v1/auth/email/verify": {
      "post": {
        "operationId": "AuthController_verifyEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VerifyEmailDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "Email verified successfully" },
          "400": { "description": "Invalid or expired token" },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Verify email with token",
        "tags": ["auth"]
      }
    },
    "/api/v1/auth/email/verification-status": {
      "get": {
        "operationId": "AuthController_getEmailVerificationStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Email verification status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": { "type": "string" },
                    "verified": { "type": "boolean" },
                    "verifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Check email verification status for the current user",
        "tags": ["auth"]
      }
    },
    "/api/v1/auth/google": {
      "get": {
        "operationId": "AuthController_googleAuth",
        "parameters": [],
        "responses": {
          "200": { "description": "Redirects to Google login" },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Google OAuth login",
        "tags": ["auth"]
      }
    },
    "/api/v1/auth/google/callback": {
      "get": {
        "operationId": "AuthController_googleAuthCallback",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Google login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "description": "JWT token to be used for authenticated requests"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "email": { "type": "string" },
                        "firstName": { "type": "string" },
                        "lastName": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Google OAuth callback",
        "tags": ["auth"]
      }
    },
    "/api/v1/auth/link-account": {
      "post": {
        "operationId": "AuthController_linkAccount",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LinkAccountDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "Account linked successfully" },
          "400": { "description": "Invalid request or provider" },
          "401": { "description": "Unauthorized" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Link current account with OAuth provider",
        "tags": ["auth"]
      }
    },
    "/api/v1/auth/unlink-provider/{provider}": {
      "post": {
        "operationId": "AuthController_unlinkProvider",
        "parameters": [
          {
            "name": "provider",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Provider unlinked successfully" },
          "400": {
            "description": "Invalid request or cannot unlink last login method"
          },
          "401": { "description": "Unauthorized" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Unlink an OAuth provider from current account",
        "tags": ["auth"]
      }
    },
    "/api/v1/auth/github": {
      "get": {
        "operationId": "AuthController_githubAuth",
        "parameters": [],
        "responses": {
          "200": { "description": "Redirects to GitHub login" },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "GitHub OAuth login",
        "tags": ["auth"]
      }
    },
    "/api/v1/auth/github/callback": {
      "get": {
        "operationId": "AuthController_githubAuthCallback",
        "parameters": [],
        "responses": {
          "200": {
            "description": "GitHub login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "description": "JWT token to be used for authenticated requests"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "email": { "type": "string" },
                        "firstName": { "type": "string" },
                        "lastName": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "GitHub OAuth callback",
        "tags": ["auth"]
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "parameters": [],
        "responses": {
          "200": { "description": "Logout successful" },
          "401": { "description": "Unauthorized" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Logout user",
        "tags": ["auth"]
      }
    },
    "/api/v1/categories": {
      "post": {
        "description": "Creates a new category. Note: Setting isDefault or isSystem to true requires admin privileges.",
        "operationId": "CategoriesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateCategoryDto" }
            }
          }
        },
        "responses": {
          "201": { "description": "Category created successfully." },
          "400": { "description": "Bad request." },
          "403": {
            "description": "Forbidden. Admin privileges required for setting isDefault or isSystem."
          },
          "409": { "description": "Category already exists." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Create a new category",
        "tags": ["categories"]
      },
      "get": {
        "operationId": "CategoriesController_findAll",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by name",
            "schema": { "example": "Groceries", "type": "string" }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by type",
            "schema": {
              "example": "EXPENSE",
              "type": "string",
              "enum": ["INCOME", "EXPENSE"]
            }
          },
          {
            "name": "isDefault",
            "required": false,
            "in": "query",
            "description": "Filter by default flag",
            "schema": { "example": true, "type": "boolean" }
          },
          {
            "name": "isSystem",
            "required": false,
            "in": "query",
            "description": "Filter by system flag",
            "schema": { "example": true, "type": "boolean" }
          }
        ],
        "responses": {
          "200": { "description": "Returns a list of categories." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get all categories",
        "tags": ["categories"]
      }
    },
    "/api/v1/categories/{id}": {
      "get": {
        "operationId": "CategoriesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Returns the category." },
          "404": { "description": "Category not found." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get a category by ID",
        "tags": ["categories"]
      },
      "patch": {
        "description": "Updates a category. Note: Setting isDefault or isSystem to true requires admin privileges.",
        "operationId": "CategoriesController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateCategoryDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "Category updated successfully." },
          "400": { "description": "Bad request." },
          "403": {
            "description": "Forbidden. Admin privileges required for setting isDefault or isSystem."
          },
          "404": { "description": "Category not found." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Update a category",
        "tags": ["categories"]
      },
      "delete": {
        "operationId": "CategoriesController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Category deleted successfully." },
          "400": {
            "description": "Bad request or category has associated transactions."
          },
          "404": { "description": "Category not found." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Delete a category",
        "tags": ["categories"]
      }
    },
    "/api/v1/categories/types/all": {
      "get": {
        "operationId": "CategoriesController_findAllTypes",
        "parameters": [],
        "responses": {
          "200": { "description": "Returns a list of category types." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get all category types",
        "tags": ["categories"]
      }
    },
    "/api/v1/categories/default/all": {
      "get": {
        "operationId": "CategoriesController_findDefaultCategories",
        "parameters": [],
        "responses": {
          "200": { "description": "Returns a list of default categories." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get all default categories",
        "tags": ["categories"]
      }
    },
    "/api/v1/categories/system/all": {
      "get": {
        "operationId": "CategoriesController_findSystemCategories",
        "parameters": [],
        "responses": {
          "200": { "description": "Returns a list of system categories." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get all system categories",
        "tags": ["categories"]
      }
    },
    "/api/v1/payment-methods": {
      "post": {
        "description": "Creates a new payment method. Note: Setting isDefault or isSystem to true requires admin privileges.",
        "operationId": "PaymentMethodsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentMethodDto"
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Payment method created successfully." },
          "400": { "description": "Bad request." },
          "403": {
            "description": "Forbidden. Admin privileges required for setting isDefault or isSystem."
          },
          "409": { "description": "Payment method already exists." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Create a new payment method",
        "tags": ["payment-methods"]
      },
      "get": {
        "operationId": "PaymentMethodsController_findAll",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by name",
            "schema": { "example": "Credit", "type": "string" }
          },
          {
            "name": "isDefault",
            "required": false,
            "in": "query",
            "description": "Filter by default flag",
            "schema": { "example": true, "type": "boolean" }
          },
          {
            "name": "isSystem",
            "required": false,
            "in": "query",
            "description": "Filter by system flag",
            "schema": { "example": true, "type": "boolean" }
          }
        ],
        "responses": {
          "200": { "description": "Returns a list of payment methods." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get all payment methods",
        "tags": ["payment-methods"]
      }
    },
    "/api/v1/payment-methods/{id}": {
      "get": {
        "operationId": "PaymentMethodsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Payment method ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Returns the payment method." },
          "404": { "description": "Payment method not found." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get a payment method by ID",
        "tags": ["payment-methods"]
      },
      "patch": {
        "description": "Updates a payment method. Note: Setting isDefault or isSystem to true requires admin privileges.",
        "operationId": "PaymentMethodsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Payment method ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentMethodDto"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Payment method updated successfully." },
          "400": { "description": "Bad request." },
          "403": {
            "description": "Forbidden. Admin privileges required for setting isDefault or isSystem."
          },
          "404": { "description": "Payment method not found." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Update a payment method",
        "tags": ["payment-methods"]
      },
      "delete": {
        "operationId": "PaymentMethodsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Payment method ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Payment method deleted successfully." },
          "400": {
            "description": "Bad request or payment method has associated transactions."
          },
          "404": { "description": "Payment method not found." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Delete a payment method",
        "tags": ["payment-methods"]
      }
    },
    "/api/v1/payment-methods/default/all": {
      "get": {
        "operationId": "PaymentMethodsController_findDefaultPaymentMethods",
        "parameters": [],
        "responses": {
          "200": { "description": "Returns a list of default payment methods." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get all default payment methods",
        "tags": ["payment-methods"]
      }
    },
    "/api/v1/payment-methods/system/all": {
      "get": {
        "operationId": "PaymentMethodsController_findSystemPaymentMethods",
        "parameters": [],
        "responses": {
          "200": { "description": "Returns a list of system payment methods." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get all system payment methods",
        "tags": ["payment-methods"]
      }
    },
    "/api/v1/expenses": {
      "post": {
        "operationId": "ExpensesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateExpenseDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Expense created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "amount": { "type": "number" },
                    "description": { "type": "string" },
                    "date": { "type": "string", "format": "date-time" },
                    "categoryId": { "type": "string" },
                    "userId": { "type": "string" },
                    "createdAt": { "type": "string", "format": "date-time" },
                    "updatedAt": { "type": "string", "format": "date-time" }
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request - Invalid input" },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Create a new expense",
        "tags": ["expenses"]
      },
      "get": {
        "operationId": "ExpensesController_findAll",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date (YYYY-MM-DD)",
            "schema": { "example": "2023-01-01", "type": "string" }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date (YYYY-MM-DD)",
            "schema": { "example": "2023-12-31", "type": "string" }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Category ID",
            "schema": { "example": "category-uuid", "type": "string" }
          },
          {
            "name": "paymentMethodId",
            "required": false,
            "in": "query",
            "description": "Filter by payment method ID",
            "schema": { "example": "payment-method-uuid", "type": "string" }
          },
          {
            "name": "searchTerm",
            "required": false,
            "in": "query",
            "description": "Search term for description",
            "schema": { "example": "Groceries", "type": "string" }
          },
          {
            "name": "minAmount",
            "required": false,
            "in": "query",
            "description": "Minimum amount in cents",
            "schema": { "example": 1000, "type": "number" }
          },
          {
            "name": "maxAmount",
            "required": false,
            "in": "query",
            "description": "Maximum amount in cents",
            "schema": { "example": 50000, "type": "number" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": { "example": 1, "type": "number" }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": { "example": 20, "type": "number" }
          },
          {
            "name": "includeVoid",
            "required": false,
            "in": "query",
            "description": "Include void expenses",
            "schema": { "example": false, "type": "boolean" }
          },
          {
            "name": "includeRecurring",
            "required": false,
            "in": "query",
            "description": "Include recurring expenses",
            "schema": { "example": false, "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns expenses with pagination.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "amount": { "type": "number" },
                          "description": { "type": "string" },
                          "date": { "type": "string", "format": "date-time" },
                          "categoryId": { "type": "string" },
                          "userId": { "type": "string" },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": { "type": "number" },
                        "page": { "type": "number" },
                        "limit": { "type": "number" },
                        "totalPages": { "type": "number" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get all expenses with pagination and filters",
        "tags": ["expenses"]
      },
      "put": {
        "operationId": "ExpensesController_update",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateExpenseDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expense updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "amount": { "type": "number" },
                    "description": { "type": "string" },
                    "date": { "type": "string", "format": "date-time" },
                    "categoryId": { "type": "string" },
                    "userId": { "type": "string" },
                    "updatedAt": { "type": "string", "format": "date-time" }
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request - Invalid input" },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          },
          "404": { "description": "Expense not found" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Update an expense",
        "tags": ["expenses"]
      },
      "delete": {
        "operationId": "ExpensesController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "query",
            "description": "Expense ID to delete",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Expense deleted successfully" },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          },
          "404": { "description": "Expense not found" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Delete an expense",
        "tags": ["expenses"]
      }
    },
    "/api/v1/expenses/{id}": {
      "get": {
        "operationId": "ExpensesController_findById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Expense ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the expense.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "amount": { "type": "number" },
                    "description": { "type": "string" },
                    "date": { "type": "string", "format": "date-time" },
                    "categoryId": { "type": "string" },
                    "userId": { "type": "string" },
                    "createdAt": { "type": "string", "format": "date-time" },
                    "updatedAt": { "type": "string", "format": "date-time" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          },
          "404": { "description": "Expense not found" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get an expense by ID",
        "tags": ["expenses"]
      }
    },
    "/api/v1/expenses/stats/by-category": {
      "get": {
        "operationId": "ExpensesController_getExpenseTotalsByCategory",
        "parameters": [
          {
            "name": "startDate",
            "required": true,
            "in": "query",
            "description": "Start date (YYYY-MM-DD)",
            "schema": { "example": "2023-01-01", "type": "string" }
          },
          {
            "name": "endDate",
            "required": true,
            "in": "query",
            "description": "End date (YYYY-MM-DD)",
            "schema": { "example": "2023-12-31", "type": "string" }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Filter by category ID",
            "schema": { "example": "category-uuid", "type": "string" }
          },
          {
            "name": "paymentMethodId",
            "required": false,
            "in": "query",
            "description": "Filter by payment method ID",
            "schema": { "example": "payment-method-uuid", "type": "string" }
          },
          {
            "name": "searchTerm",
            "required": false,
            "in": "query",
            "description": "Search term for description",
            "schema": { "example": "Groceries", "type": "string" }
          },
          {
            "name": "minAmount",
            "required": false,
            "in": "query",
            "description": "Minimum amount in cents",
            "schema": { "example": 1000, "type": "number" }
          },
          {
            "name": "maxAmount",
            "required": false,
            "in": "query",
            "description": "Maximum amount in cents",
            "schema": { "example": 50000, "type": "number" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": { "example": 1, "type": "number" }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": { "example": 20, "type": "number" }
          },
          {
            "name": "includeVoid",
            "required": false,
            "in": "query",
            "description": "Include void expenses",
            "schema": { "example": false, "type": "boolean" }
          },
          {
            "name": "includeRecurring",
            "required": false,
            "in": "query",
            "description": "Include recurring expenses",
            "schema": { "example": false, "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns expense totals by category.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "categoryId": { "type": "string" },
                      "categoryName": { "type": "string" },
                      "total": { "type": "number" },
                      "count": { "type": "number" }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request - Missing date range" },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get expense totals by category",
        "tags": ["expenses"]
      }
    },
    "/api/v1/income": {
      "get": {
        "operationId": "IncomeController_findAll",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for filtering",
            "schema": {
              "format": "date-time",
              "example": "2023-01-01",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for filtering",
            "schema": {
              "format": "date-time",
              "example": "2023-12-31",
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Filter by category ID",
            "schema": { "example": "category-uuid", "type": "string" }
          },
          {
            "name": "paymentMethodId",
            "required": false,
            "in": "query",
            "description": "Filter by payment method ID",
            "schema": { "example": "payment-method-uuid", "type": "string" }
          },
          {
            "name": "searchTerm",
            "required": false,
            "in": "query",
            "description": "Search in description",
            "schema": { "example": "Salary", "type": "string" }
          },
          {
            "name": "minAmount",
            "required": false,
            "in": "query",
            "description": "Minimum amount in cents",
            "schema": { "example": 10000, "type": "number" }
          },
          {
            "name": "maxAmount",
            "required": false,
            "in": "query",
            "description": "Maximum amount in cents",
            "schema": { "example": 100000, "type": "number" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": { "example": 1, "type": "number" }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": { "example": 20, "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns income records with pagination.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "amount": { "type": "number" },
                          "description": { "type": "string" },
                          "date": { "type": "string", "format": "date-time" },
                          "categoryId": { "type": "string" },
                          "userId": { "type": "string" },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": { "type": "number" },
                        "page": { "type": "number" },
                        "limit": { "type": "number" },
                        "totalPages": { "type": "number" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get all income records with pagination and filters",
        "tags": ["income"]
      },
      "post": {
        "operationId": "IncomeController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateIncomeDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Income record created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "amount": { "type": "number" },
                    "description": { "type": "string" },
                    "date": { "type": "string", "format": "date-time" },
                    "categoryId": { "type": "string" },
                    "userId": { "type": "string" },
                    "createdAt": { "type": "string", "format": "date-time" },
                    "updatedAt": { "type": "string", "format": "date-time" }
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Unauthorized." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Create a new income record",
        "tags": ["income"]
      },
      "put": {
        "operationId": "IncomeController_update",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateIncomeDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Income record updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "amount": { "type": "number" },
                    "description": { "type": "string" },
                    "date": { "type": "string", "format": "date-time" },
                    "categoryId": { "type": "string" },
                    "userId": { "type": "string" },
                    "updatedAt": { "type": "string", "format": "date-time" }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized." },
          "404": { "description": "Income record not found." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Update an income record",
        "tags": ["income"]
      },
      "delete": {
        "operationId": "IncomeController_void",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "query",
            "description": "Income record ID to void",
            "schema": {}
          }
        ],
        "responses": {
          "200": { "description": "Income record voided successfully." },
          "401": { "description": "Unauthorized." },
          "404": { "description": "Income record not found." }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Void an income record",
        "tags": ["income"]
      }
    },
    "/api/v1/income/{id}": {
      "get": {
        "operationId": "IncomeController_findById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Income ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the income record.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "amount": { "type": "number" },
                    "description": { "type": "string" },
                    "date": { "type": "string", "format": "date-time" },
                    "categoryId": { "type": "string" },
                    "userId": { "type": "string" },
                    "createdAt": { "type": "string", "format": "date-time" },
                    "updatedAt": { "type": "string", "format": "date-time" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          },
          "404": { "description": "Income record not found" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get an income record by ID",
        "tags": ["income"]
      }
    },
    "/api/v1/income/stats/by-category": {
      "get": {
        "operationId": "IncomeController_getIncomeTotalsByCategory",
        "parameters": [
          {
            "name": "startDate",
            "required": true,
            "in": "query",
            "description": "Start date (YYYY-MM-DD)",
            "schema": { "example": "2023-01-01", "type": "string" }
          },
          {
            "name": "endDate",
            "required": true,
            "in": "query",
            "description": "End date (YYYY-MM-DD)",
            "schema": { "example": "2023-12-31", "type": "string" }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Filter by category ID",
            "schema": { "example": "category-uuid", "type": "string" }
          },
          {
            "name": "paymentMethodId",
            "required": false,
            "in": "query",
            "description": "Filter by payment method ID",
            "schema": { "example": "payment-method-uuid", "type": "string" }
          },
          {
            "name": "searchTerm",
            "required": false,
            "in": "query",
            "description": "Search term for description",
            "schema": { "example": "Salary", "type": "string" }
          },
          {
            "name": "minAmount",
            "required": false,
            "in": "query",
            "description": "Minimum amount in cents",
            "schema": { "example": 10000, "type": "number" }
          },
          {
            "name": "maxAmount",
            "required": false,
            "in": "query",
            "description": "Maximum amount in cents",
            "schema": { "example": 100000, "type": "number" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": { "example": 1, "type": "number" }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": { "example": 20, "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns income totals by category.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "categoryId": { "type": "string" },
                      "categoryName": { "type": "string" },
                      "total": { "type": "number" },
                      "count": { "type": "number" }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request - Missing date range" },
          "401": {
            "description": "Unauthorized - Valid JWT token is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Unauthorized" },
                    "statusCode": { "type": "number", "example": 401 },
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get income totals by category",
        "tags": ["income"]
      }
    },
    "/api/v1/newsletter/subscribe": {
      "post": {
        "description": "Subscribe to the newsletter with optional preferences. If no preferences are provided, defaults to all types enabled.",
        "operationId": "NewsletterController_subscribe",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewsletterPreferencesDto"
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Successfully subscribed to newsletter" },
          "404": { "description": "User not found" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Subscribe to newsletter",
        "tags": ["newsletter"]
      }
    },
    "/api/v1/newsletter/unsubscribe": {
      "delete": {
        "description": "Unsubscribe from all newsletter types and set unsubscribe timestamp",
        "operationId": "NewsletterController_unsubscribe",
        "parameters": [],
        "responses": {
          "200": { "description": "Successfully unsubscribed from newsletter" },
          "404": { "description": "Subscription not found" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Unsubscribe from newsletter",
        "tags": ["newsletter"]
      }
    },
    "/api/v1/newsletter/preferences": {
      "put": {
        "description": "Update subscription preferences for different types of newsletters",
        "operationId": "NewsletterController_updatePreferences",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewsletterPreferencesDto"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Successfully updated preferences" },
          "404": { "description": "Subscription not found" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Update newsletter preferences",
        "tags": ["newsletter"]
      }
    },
    "/api/v1/newsletter/status": {
      "get": {
        "description": "Get current subscription status and preferences",
        "operationId": "NewsletterController_getSubscriptionStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns subscription status and preferences",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isSubscribed": { "type": "boolean" },
                    "preferences": {
                      "type": "object",
                      "properties": {
                        "weeklyDigest": { "type": "boolean" },
                        "promotionalEmails": { "type": "boolean" },
                        "productUpdates": { "type": "boolean" }
                      }
                    },
                    "unsubscribedAt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Get newsletter subscription status",
        "tags": ["newsletter"]
      }
    },
    "/api/v1/newsletter/send": {
      "post": {
        "description": "Trigger sending of newsletter to all active subscribers. Super Admin only.",
        "operationId": "NewsletterController_sendNewsletter",
        "parameters": [],
        "responses": {
          "200": { "description": "Newsletter sending initiated" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "403": { "description": "Forbidden - Super Admin only" },
          "429": { "description": "Too Many Requests" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Send newsletter to all subscribers",
        "tags": ["newsletter"]
      }
    },
    "/api/v1/newsletter/check-inactive": {
      "post": {
        "description": "Send \"we miss you\" emails to users who have not logged in for over a month. Super Admin only.",
        "operationId": "NewsletterController_checkInactiveUsers",
        "parameters": [],
        "responses": {
          "200": { "description": "Inactive user check completed" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "403": { "description": "Forbidden - Super Admin only" },
          "429": { "description": "Too Many Requests" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Check and notify inactive users",
        "tags": ["newsletter"]
      }
    },
    "/api/v1/export": {
      "post": {
        "description": "Generate a ZIP file containing user data based on specified options and send it via email",
        "operationId": "ExportController_generateExport",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ExportOptionsDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Export generated and sent to user email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Whether the operation was successful"
                    },
                    "message": {
                      "type": "string",
                      "description": "Status message about the export"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid export options" },
          "401": { "description": "Unauthorized or email not verified" },
          "404": { "description": "User not found" }
        },
        "security": [{ "JWT-auth": [] }],
        "summary": "Generate user data export",
        "tags": ["export"]
      }
    }
  },
  "info": {
    "title": "CurioPay API",
    "description": "The CurioPay API documentation",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    { "name": "auth", "description": "Authentication endpoints" },
    { "name": "users", "description": "User operations" },
    { "name": "user-preferences", "description": "User preferences" },
    { "name": "categories", "description": "Category management" },
    { "name": "payment-methods", "description": "Payment method management" },
    { "name": "expenses", "description": "Expense management" },
    { "name": "income", "description": "Income management" },
    { "name": "export", "description": "Data export" },
    { "name": "newsletter", "description": "Newsletter management" }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "JWT-auth": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "name": "JWT",
        "description": "Enter JWT token",
        "in": "header"
      },
      "X-API-Key": { "type": "apiKey", "in": "header", "name": "X-API-Key" }
    },
    "schemas": {
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "User email address - must be a valid email format"
          },
          "password": {
            "type": "string",
            "example": "Tr0ub4dour&3",
            "description": "Password requirements:\n    - Must be between 8 and 64 characters\n    - Must be strong enough according to zxcvbn password strength estimator\n    - Should include a mix of letters, numbers, and symbols"
          },
          "firstName": {
            "type": "string",
            "example": "John",
            "description": "First name requirements:\n    - Must be between 2 and 50 characters\n    - Can only contain letters, accents, spaces, hyphens, and apostrophes"
          },
          "lastName": {
            "type": "string",
            "example": "Doe",
            "description": "Last name requirements:\n    - Must be between 2 and 50 characters\n    - Can only contain letters, accents, spaces, hyphens, and apostrophes"
          },
          "phone": {
            "type": "string",
            "example": "+1234567890",
            "description": "Phone number in international format (e.g., +1234567890)"
          }
        },
        "required": ["email", "password", "firstName", "lastName"]
      },
      "UpdateUserRoleDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": ["USER", "ADMIN", "SUPER_ADMIN"],
            "description": "User role",
            "example": "ADMIN"
          }
        },
        "required": ["role"]
      },
      "UserProfileResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "email": { "type": "string", "example": "john.doe@example.com" },
          "firstName": { "type": "string", "example": "John" },
          "lastName": { "type": "string", "example": "Doe" },
          "role": { "type": "string", "example": "USER" },
          "isActive": { "type": "boolean", "example": true },
          "phone": { "type": "string", "example": "+1234567890" },
          "currencyId": { "type": "string", "example": "usd" },
          "languageId": { "type": "string", "example": "en" },
          "themeId": { "type": "string", "example": "light" },
          "lastLoginAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-03-20T12:00:00Z"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-03-20T12:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-03-20T12:00:00Z"
          }
        },
        "required": [
          "id",
          "email",
          "firstName",
          "lastName",
          "role",
          "isActive",
          "phone",
          "currencyId",
          "languageId",
          "themeId",
          "lastLoginAt",
          "createdAt",
          "updatedAt"
        ]
      },
      "DeleteAccountDto": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "description": "Current password to confirm account deletion",
            "example": "currentPassword123"
          },
          "confirm": {
            "type": "boolean",
            "description": "Confirmation that user wants to delete their account",
            "example": true
          }
        },
        "required": ["currentPassword", "confirm"]
      },
      "UserPreferencesResponseDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "User preference ID" },
          "currency": {
            "type": "object",
            "description": "Currency",
            "properties": {
              "id": { "type": "string" },
              "code": { "type": "string" },
              "symbol": { "type": "string" },
              "name": { "type": "string" }
            }
          },
          "language": {
            "type": "object",
            "description": "Language",
            "properties": {
              "id": { "type": "string" },
              "code": { "type": "string" },
              "name": { "type": "string" }
            }
          },
          "theme": {
            "type": "object",
            "description": "Theme",
            "properties": {
              "id": { "type": "string" },
              "name": { "type": "string" }
            }
          },
          "monthlyBudget": {
            "type": "number",
            "description": "Monthly budget",
            "example": 1000,
            "nullable": true
          },
          "enableAiFeatures": {
            "type": "boolean",
            "description": "Enable AI features",
            "default": true
          }
        },
        "required": [
          "id",
          "currency",
          "language",
          "theme",
          "monthlyBudget",
          "enableAiFeatures"
        ]
      },
      "UpdateUserPreferencesDto": {
        "type": "object",
        "properties": {
          "currencyId": { "type": "string", "description": "Currency ID" },
          "languageId": { "type": "string", "description": "Language ID" },
          "themeId": { "type": "string", "description": "Theme ID" },
          "monthlyBudget": {
            "type": "number",
            "description": "Monthly budget",
            "example": 1000
          },
          "enableAiFeatures": {
            "type": "boolean",
            "description": "Enable AI features",
            "default": true
          }
        }
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "User email"
          },
          "password": {
            "type": "string",
            "example": "Password123!",
            "description": "User password"
          },
          "rememberMe": {
            "type": "boolean",
            "example": false,
            "description": "Extended session duration when true",
            "default": false
          }
        },
        "required": ["email", "password"]
      },
      "CompleteLoginWithMfaDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "123456",
            "description": "MFA verification code"
          },
          "tempToken": {
            "type": "string",
            "example": "abc123",
            "description": "Temporary login token for MFA verification"
          }
        },
        "required": ["code", "tempToken"]
      },
      "RequestPasswordResetDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "Email address associated with your account"
          }
        },
        "required": ["email"]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Password reset token received via email"
          },
          "newPassword": {
            "type": "string",
            "example": "Tr0ub4dour&3",
            "description": "New password requirements:\n    - Must be between 8 and 64 characters\n    - Must be strong enough according to zxcvbn password strength estimator\n    - Should include a mix of letters, numbers, and symbols"
          }
        },
        "required": ["token", "newPassword"]
      },
      "EnableMfaDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "123456",
            "description": "MFA verification code"
          }
        },
        "required": ["code"]
      },
      "VerifyMfaDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "123456",
            "description": "MFA verification code"
          }
        },
        "required": ["code"]
      },
      "DisableMfaDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "123456",
            "description": "MFA verification code"
          },
          "confirm": {
            "type": "boolean",
            "example": true,
            "description": "Confirm MFA disable action"
          }
        },
        "required": ["code", "confirm"]
      },
      "RequestEmailVerificationDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address to send verification link to (for unauthenticated users)",
            "example": "user@example.com"
          },
          "userId": {
            "type": "string",
            "description": "User ID (for authenticated users)",
            "example": "e0b9f5c4-3d2e-4c9d-b2c3-2a9a3f8c6e5b"
          }
        }
      },
      "VerifyEmailDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Verification token sent to user email",
            "example": "e0b9f5c4-3d2e-4c9d-b2c3-2a9a3f8c6e5b"
          }
        },
        "required": ["token"]
      },
      "LinkAccountDto": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "example": "google",
            "description": "OAuth provider to link with"
          },
          "providerAccountId": {
            "type": "string",
            "example": "123456789",
            "description": "Provider account ID (optional, can be provided by the OAuth flow)"
          },
          "accessToken": {
            "type": "string",
            "example": "token123",
            "description": "Provider access token or verification token"
          }
        },
        "required": ["provider"]
      },
      "CreateCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Groceries",
            "description": "Name of the category",
            "minLength": 2,
            "maxLength": 50
          },
          "icon": {
            "type": "string",
            "example": "🛒",
            "description": "Emoji icon for the category"
          },
          "type": {
            "type": "string",
            "enum": ["INCOME", "EXPENSE"],
            "example": "EXPENSE",
            "description": "Type of the category (INCOME or EXPENSE)"
          },
          "color": {
            "type": "string",
            "example": "#FF5733",
            "description": "Color code for the category (hex format)",
            "pattern": "^#[0-9A-Fa-f]{6}$"
          },
          "isDefault": {
            "type": "boolean",
            "example": false,
            "description": "Whether this is a default category. Note: Requires admin privileges to set to true.",
            "default": false
          },
          "isSystem": {
            "type": "boolean",
            "example": false,
            "description": "Whether this is a system category. Note: Requires admin privileges to set to true.",
            "default": false
          }
        },
        "required": ["name", "icon", "type"]
      },
      "UpdateCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Groceries",
            "description": "Name of the category",
            "minLength": 2,
            "maxLength": 50
          },
          "icon": {
            "type": "string",
            "example": "🛒",
            "description": "Emoji icon for the category"
          },
          "type": {
            "type": "string",
            "enum": ["INCOME", "EXPENSE"],
            "example": "EXPENSE",
            "description": "Type of the category (INCOME or EXPENSE)"
          },
          "color": {
            "type": "string",
            "example": "#FF5733",
            "description": "Color code for the category (hex format)",
            "pattern": "^#[0-9A-Fa-f]{6}$"
          },
          "isDefault": {
            "type": "boolean",
            "example": false,
            "description": "Whether this is a default category"
          }
        }
      },
      "CreatePaymentMethodDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Payment method name (from enum)",
            "enum": [
              "CASH",
              "CREDIT_CARD",
              "DEBIT_CARD",
              "BANK_TRANSFER",
              "CHECK",
              "CRYPTO",
              "OTHER"
            ],
            "example": "CREDIT_CARD"
          },
          "icon": {
            "type": "string",
            "description": "Icon for the payment method",
            "example": "credit-card"
          },
          "isDefault": {
            "type": "boolean",
            "example": false,
            "description": "Whether this is a default payment method. Note: Requires admin privileges to set to true.",
            "default": false
          },
          "isSystem": {
            "type": "boolean",
            "example": false,
            "description": "Whether this is a system payment method. Note: Requires admin privileges to set to true.",
            "default": false
          }
        },
        "required": ["name"]
      },
      "UpdatePaymentMethodDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Payment method ID",
            "example": "cma3sh4it0000reguowhqncor"
          },
          "icon": {
            "type": "string",
            "description": "Icon for the payment method",
            "example": "credit-card"
          },
          "isDefault": {
            "type": "boolean",
            "example": false,
            "description": "Whether this is a default payment method"
          }
        },
        "required": ["id"]
      },
      "i": { "type": "object", "properties": {} },
      "CreateExpenseDto": {
        "type": "object",
        "properties": {
          "date": {
            "format": "date-time",
            "type": "string",
            "example": "2023-05-15",
            "description": "Date when the expense occurred"
          },
          "description": {
            "type": "string",
            "example": "Grocery Shopping",
            "description": "Description of the expense"
          },
          "amount": {
            "example": 15000,
            "description": "Expense amount in cents (e.g., $150.00 = 15000)",
            "allOf": [{ "$ref": "#/components/schemas/i" }]
          },
          "categoryId": {
            "type": "string",
            "example": "category-uuid",
            "description": "Category ID for the expense"
          },
          "paymentMethodId": {
            "type": "string",
            "example": "payment-method-uuid",
            "description": "Payment method ID (e.g., credit card, cash)"
          },
          "notes": {
            "type": "string",
            "example": "Monthly groceries including special items",
            "description": "Additional notes about the expense"
          }
        },
        "required": [
          "date",
          "description",
          "amount",
          "categoryId",
          "paymentMethodId"
        ]
      },
      "UpdateExpenseDto": {
        "type": "object",
        "properties": {
          "date": {
            "format": "date-time",
            "type": "string",
            "example": "2023-05-15",
            "description": "Date when the expense occurred"
          },
          "description": {
            "type": "string",
            "example": "Grocery Shopping",
            "description": "Description of the expense"
          },
          "amount": {
            "example": 15000,
            "description": "Expense amount in cents (e.g., $150.00 = 15000)",
            "allOf": [{ "$ref": "#/components/schemas/i" }]
          },
          "categoryId": {
            "type": "string",
            "example": "category-uuid",
            "description": "Category ID for the expense"
          },
          "paymentMethodId": {
            "type": "string",
            "example": "payment-method-uuid",
            "description": "Payment method ID (e.g., credit card, cash)"
          },
          "notes": {
            "type": "string",
            "example": "Monthly groceries including special items",
            "description": "Additional notes about the expense"
          }
        }
      },
      "CreateIncomeDto": {
        "type": "object",
        "properties": {
          "date": {
            "format": "date-time",
            "type": "string",
            "example": "2023-05-15",
            "description": "Date when the income was received"
          },
          "description": {
            "type": "string",
            "example": "Monthly Salary",
            "description": "Description of the income"
          },
          "amount": {
            "type": "number",
            "example": 200000,
            "description": "Income amount in cents (e.g., $2000.00 = 200000)"
          },
          "categoryId": {
            "type": "string",
            "example": "category-uuid",
            "description": "Category ID for the income"
          },
          "paymentMethodId": {
            "type": "string",
            "example": "payment-method-uuid",
            "description": "Payment method ID (e.g., bank account, cash)"
          },
          "notes": {
            "type": "string",
            "example": "End of month bonus included",
            "description": "Additional notes about the income"
          }
        },
        "required": [
          "date",
          "description",
          "amount",
          "categoryId",
          "paymentMethodId"
        ]
      },
      "UpdateIncomeDto": {
        "type": "object",
        "properties": {
          "date": {
            "format": "date-time",
            "type": "string",
            "example": "2023-05-15",
            "description": "Date when the income was received"
          },
          "description": {
            "type": "string",
            "example": "Monthly Salary",
            "description": "Description of the income"
          },
          "amount": {
            "type": "number",
            "example": 200000,
            "description": "Income amount in cents (e.g., $2000.00 = 200000)"
          },
          "categoryId": {
            "type": "string",
            "example": "category-uuid",
            "description": "Category ID for the income"
          },
          "paymentMethodId": {
            "type": "string",
            "example": "payment-method-uuid",
            "description": "Payment method ID (e.g., bank account, cash)"
          },
          "notes": {
            "type": "string",
            "example": "End of month bonus included",
            "description": "Additional notes about the income"
          }
        }
      },
      "NewsletterPreferencesDto": {
        "type": "object",
        "properties": {
          "weeklyDigest": {
            "type": "boolean",
            "description": "Receive weekly digest emails",
            "default": true
          },
          "promotionalEmails": {
            "type": "boolean",
            "description": "Receive promotional emails",
            "default": true
          },
          "productUpdates": {
            "type": "boolean",
            "description": "Receive product updates",
            "default": true
          }
        },
        "required": ["weeklyDigest", "promotionalEmails", "productUpdates"]
      },
      "ExportOptionsDto": {
        "type": "object",
        "properties": {
          "includeExpenses": {
            "type": "boolean",
            "description": "Include expense data in export",
            "default": true
          },
          "includeIncome": {
            "type": "boolean",
            "description": "Include income data in export",
            "default": true
          },
          "includeCategories": {
            "type": "boolean",
            "description": "Include categories in export",
            "default": true
          },
          "includePreferences": {
            "type": "boolean",
            "description": "Include user preferences in export",
            "default": true
          },
          "includeNewsletter": {
            "type": "boolean",
            "description": "Include newsletter preferences in export",
            "default": true
          }
        },
        "required": [
          "includeExpenses",
          "includeIncome",
          "includeCategories",
          "includePreferences",
          "includeNewsletter"
        ]
      }
    }
  }
}
