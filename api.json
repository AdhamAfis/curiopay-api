{
    "openapi": "3.0.0",
    "paths": {
      "/api/v1/users": {
        "post": {
          "operationId": "createUser",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "User created successfully"
            },
            "400": {
              "description": "Invalid input"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden - Admin access required"
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Create a new user (Admin only)",
          "tags": [
            "users"
          ]
        },
        "get": {
          "operationId": "getAllUsers",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Returns list of users"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden - Admin access required"
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Get all users (Admin only)",
          "tags": [
            "users"
          ]
        }
      },
      "/api/v1/users/{id}": {
        "get": {
          "operationId": "findOne",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "User ID",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the user."
            },
            "404": {
              "description": "User not found."
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Get user by ID (Admin only)",
          "tags": [
            "users"
          ]
        }
      },
      "/api/v1/users/{id}/role": {
        "patch": {
          "operationId": "updateUserRole",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserRoleDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User role updated successfully"
            },
            "400": {
              "description": "Invalid input"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden - Admin access required"
            },
            "404": {
              "description": "User not found"
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Update user role (Admin only)",
          "tags": [
            "users"
          ]
        }
      },
      "/api/v1/users/{id}/toggle-active": {
        "patch": {
          "operationId": "toggleActive",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "User ID",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User status has been toggled successfully."
            },
            "404": {
              "description": "User not found."
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Toggle user active status",
          "tags": [
            "users"
          ]
        }
      },
      "/api/v1/users/me/profile": {
        "get": {
          "operationId": "getProfile",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Returns the current user profile with decrypted data.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserProfileResponseDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Get current user profile",
          "tags": [
            "users"
          ]
        }
      },
      "/api/v1/users/me/delete-account": {
        "delete": {
          "operationId": "deleteAccount",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAccountDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Account successfully deleted."
            },
            "400": {
              "description": "Invalid request or confirmation not provided."
            },
            "401": {
              "description": "Invalid password."
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Delete current user account and all associated data",
          "tags": [
            "users"
          ]
        }
      },
      "/api/v1/auth/login": {
        "post": {
          "operationId": "login",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Login successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "accessToken": {
                        "type": "string",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                        "description": "JWT token to be used for authenticated requests"
                      },
                      "user": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "firstName": {
                            "type": "string"
                          },
                          "lastName": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Invalid credentials"
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Login user",
          "tags": [
            "auth"
          ]
        }
      },
      "/api/v1/auth/register": {
        "post": {
          "operationId": "register",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "User created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "accessToken": {
                        "type": "string",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                        "description": "JWT token for the newly registered user"
                      },
                      "user": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "firstName": {
                            "type": "string"
                          },
                          "lastName": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid input"
            },
            "401": {
              "description": "Unauthorized - Valid JWT token is required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Unauthorized"
                      },
                      "statusCode": {
                        "type": "number",
                        "example": 401
                      },
                      "error": {
                        "type": "string",
                        "example": "Unauthorized"
                      }
                    }
                  }
                }
              }
            },
            "409": {
              "description": "User already exists"
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Register new user",
          "tags": [
            "auth"
          ]
        }
      },
      "/api/v1/auth/password-reset/request": {
        "post": {
          "operationId": "requestPasswordReset",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestPasswordResetDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Reset instructions sent"
            },
            "401": {
              "description": "Unauthorized - Valid JWT token is required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Unauthorized"
                      },
                      "statusCode": {
                        "type": "number",
                        "example": 401
                      },
                      "error": {
                        "type": "string",
                        "example": "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Request password reset",
          "tags": [
            "auth"
          ]
        }
      },
      "/api/v1/auth/password-reset/reset": {
        "post": {
          "operationId": "resetPassword",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPasswordDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Password reset successful"
            },
            "400": {
              "description": "Invalid or expired token"
            },
            "401": {
              "description": "Unauthorized - Valid JWT token is required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Unauthorized"
                      },
                      "statusCode": {
                        "type": "number",
                        "example": 401
                      },
                      "error": {
                        "type": "string",
                        "example": "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Reset password using token",
          "tags": [
            "auth"
          ]
        }
      },
      "/api/v1/auth/mfa/generate": {
        "get": {
          "operationId": "generateMfaSecret",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Returns MFA secret and QR code",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "secret": {
                        "type": "string"
                      },
                      "qrCode": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Valid JWT token is required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Unauthorized"
                      },
                      "statusCode": {
                        "type": "number",
                        "example": 401
                      },
                      "error": {
                        "type": "string",
                        "example": "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Generate MFA secret and QR code",
          "tags": [
            "auth"
          ]
        }
      },
      "/api/v1/auth/mfa/enable": {
        "post": {
          "operationId": "enableMfa",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnableMfaDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "MFA enabled successfully"
            },
            "400": {
              "description": "Invalid MFA code"
            },
            "401": {
              "description": "Unauthorized - Valid JWT token is required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Unauthorized"
                      },
                      "statusCode": {
                        "type": "number",
                        "example": 401
                      },
                      "error": {
                        "type": "string",
                        "example": "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Enable MFA",
          "tags": [
            "auth"
          ]
        }
      },
      "/api/v1/auth/mfa/verify": {
        "post": {
          "operationId": "verifyMfa",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyMfaDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "MFA code verified"
            },
            "400": {
              "description": "Invalid MFA code"
            },
            "401": {
              "description": "Unauthorized - Valid JWT token is required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Unauthorized"
                      },
                      "statusCode": {
                        "type": "number",
                        "example": 401
                      },
                      "error": {
                        "type": "string",
                        "example": "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Verify MFA code",
          "tags": [
            "auth"
          ]
        }
      },
      "/api/v1/auth/mfa/disable": {
        "post": {
          "operationId": "disableMfa",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisableMfaDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "MFA disabled successfully"
            },
            "400": {
              "description": "Invalid request"
            },
            "401": {
              "description": "Unauthorized - Valid JWT token is required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Unauthorized"
                      },
                      "statusCode": {
                        "type": "number",
                        "example": 401
                      },
                      "error": {
                        "type": "string",
                        "example": "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Disable MFA",
          "tags": [
            "auth"
          ]
        }
      },
      "/api/v1/expenses": {
        "post": {
          "operationId": "create",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateExpenseDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Expense created successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "amount": {
                        "type": "number"
                      },
                      "description": {
                        "type": "string"
                      },
                      "date": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "categoryId": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Invalid input"
            },
            "401": {
              "description": "Unauthorized - Valid JWT token is required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Unauthorized"
                      },
                      "statusCode": {
                        "type": "number",
                        "example": 401
                      },
                      "error": {
                        "type": "string",
                        "example": "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Create a new expense",
          "tags": [
            "expenses"
          ]
        },
        "get": {
          "operationId": "findAll",
          "parameters": [
            {
              "name": "startDate",
              "required": false,
              "in": "query",
              "description": "Start date (YYYY-MM-DD)",
              "schema": {
                "example": "2023-01-01",
                "type": "string"
              }
            },
            {
              "name": "endDate",
              "required": false,
              "in": "query",
              "description": "End date (YYYY-MM-DD)",
              "schema": {
                "example": "2023-12-31",
                "type": "string"
              }
            },
            {
              "name": "categoryId",
              "required": false,
              "in": "query",
              "description": "Category ID",
              "schema": {
                "example": "category-uuid",
                "type": "string"
              }
            },
            {
              "name": "paymentMethodId",
              "required": false,
              "in": "query",
              "description": "Filter by payment method ID",
              "schema": {
                "example": "payment-method-uuid",
                "type": "string"
              }
            },
            {
              "name": "searchTerm",
              "required": false,
              "in": "query",
              "description": "Search term for description",
              "schema": {
                "example": "Groceries",
                "type": "string"
              }
            },
            {
              "name": "minAmount",
              "required": false,
              "in": "query",
              "description": "Minimum amount in cents",
              "schema": {
                "example": 1000,
                "type": "number"
              }
            },
            {
              "name": "maxAmount",
              "required": false,
              "in": "query",
              "description": "Maximum amount in cents",
              "schema": {
                "example": 50000,
                "type": "number"
              }
            },
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "Page number",
              "schema": {
                "example": 1,
                "type": "number"
              }
            },
            {
              "name": "limit",
              "required": false,
              "in": "query",
              "description": "Items per page",
              "schema": {
                "example": 20,
                "type": "number"
              }
            },
            {
              "name": "includeVoid",
              "required": false,
              "in": "query",
              "description": "Include void expenses",
              "schema": {
                "example": false,
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns expenses with pagination.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "amount": {
                              "type": "number"
                            },
                            "description": {
                              "type": "string"
                            },
                            "date": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "categoryId": {
                              "type": "string"
                            },
                            "userId": {
                              "type": "string"
                            },
                            "createdAt": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "updatedAt": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "meta": {
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "number"
                          },
                          "page": {
                            "type": "number"
                          },
                          "limit": {
                            "type": "number"
                          },
                          "totalPages": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Valid JWT token is required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Unauthorized"
                      },
                      "statusCode": {
                        "type": "number",
                        "example": 401
                      },
                      "error": {
                        "type": "string",
                        "example": "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Get all expenses with pagination and filters",
          "tags": [
            "expenses"
          ]
        },
        "put": {
          "operationId": "update",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateExpenseDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Expense updated successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "amount": {
                        "type": "number"
                      },
                      "description": {
                        "type": "string"
                      },
                      "date": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "categoryId": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Invalid input"
            },
            "401": {
              "description": "Unauthorized - Valid JWT token is required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Unauthorized"
                      },
                      "statusCode": {
                        "type": "number",
                        "example": 401
                      },
                      "error": {
                        "type": "string",
                        "example": "Unauthorized"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Expense not found"
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Update an expense",
          "tags": [
            "expenses"
          ]
        },
        "delete": {
          "operationId": "remove",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "description": "Expense ID to delete",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Expense deleted successfully"
            },
            "401": {
              "description": "Unauthorized - Valid JWT token is required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Unauthorized"
                      },
                      "statusCode": {
                        "type": "number",
                        "example": 401
                      },
                      "error": {
                        "type": "string",
                        "example": "Unauthorized"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Expense not found"
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Delete an expense",
          "tags": [
            "expenses"
          ]
        }
      },
      "/api/v1/expenses/{id}": {
        "get": {
          "operationId": "findById",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "Expense ID",
              "schema": {
                "example": "123e4567-e89b-12d3-a456-426614174000",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the expense.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "amount": {
                        "type": "number"
                      },
                      "description": {
                        "type": "string"
                      },
                      "date": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "categoryId": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Valid JWT token is required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Unauthorized"
                      },
                      "statusCode": {
                        "type": "number",
                        "example": 401
                      },
                      "error": {
                        "type": "string",
                        "example": "Unauthorized"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Expense not found"
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Get an expense by ID",
          "tags": [
            "expenses"
          ]
        }
      },
      "/api/v1/expenses/stats/by-category": {
        "get": {
          "operationId": "getExpenseTotalsByCategory",
          "parameters": [
            {
              "name": "startDate",
              "required": true,
              "in": "query",
              "description": "Start date (YYYY-MM-DD)",
              "schema": {
                "example": "2023-01-01",
                "type": "string"
              }
            },
            {
              "name": "endDate",
              "required": true,
              "in": "query",
              "description": "End date (YYYY-MM-DD)",
              "schema": {
                "example": "2023-12-31",
                "type": "string"
              }
            },
            {
              "name": "categoryId",
              "required": false,
              "in": "query",
              "description": "Filter by category ID",
              "schema": {
                "example": "category-uuid",
                "type": "string"
              }
            },
            {
              "name": "paymentMethodId",
              "required": false,
              "in": "query",
              "description": "Filter by payment method ID",
              "schema": {
                "example": "payment-method-uuid",
                "type": "string"
              }
            },
            {
              "name": "searchTerm",
              "required": false,
              "in": "query",
              "description": "Search term for description",
              "schema": {
                "example": "Groceries",
                "type": "string"
              }
            },
            {
              "name": "minAmount",
              "required": false,
              "in": "query",
              "description": "Minimum amount in cents",
              "schema": {
                "example": 1000,
                "type": "number"
              }
            },
            {
              "name": "maxAmount",
              "required": false,
              "in": "query",
              "description": "Maximum amount in cents",
              "schema": {
                "example": 50000,
                "type": "number"
              }
            },
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "Page number for pagination",
              "schema": {
                "example": 1,
                "type": "number"
              }
            },
            {
              "name": "limit",
              "required": false,
              "in": "query",
              "description": "Number of items per page",
              "schema": {
                "example": 20,
                "type": "number"
              }
            },
            {
              "name": "includeVoid",
              "required": false,
              "in": "query",
              "description": "Include void expenses",
              "schema": {
                "example": false,
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns expense totals by category.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "categoryId": {
                          "type": "string"
                        },
                        "categoryName": {
                          "type": "string"
                        },
                        "total": {
                          "type": "number"
                        },
                        "count": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Missing date range"
            },
            "401": {
              "description": "Unauthorized - Valid JWT token is required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Unauthorized"
                      },
                      "statusCode": {
                        "type": "number",
                        "example": 401
                      },
                      "error": {
                        "type": "string",
                        "example": "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Get expense totals by category",
          "tags": [
            "expenses"
          ]
        }
      },
      "/api/v1/categories": {
        "post": {
          "operationId": "create",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCategoryDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "The category has been successfully created."
            },
            "400": {
              "description": "Invalid input data."
            },
            "409": {
              "description": "Category with this name already exists."
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Create a new category",
          "tags": [
            "categories"
          ]
        },
        "get": {
          "operationId": "findAll",
          "parameters": [
            {
              "name": "search",
              "required": false,
              "in": "query",
              "description": "Search categories by name",
              "schema": {
                "example": "Groceries",
                "type": "string"
              }
            },
            {
              "name": "type",
              "required": false,
              "in": "query",
              "description": "Filter by category type",
              "schema": {
                "example": "EXPENSE",
                "type": "string",
                "enum": [
                  "INCOME",
                  "EXPENSE"
                ]
              }
            },
            {
              "name": "isDefault",
              "required": false,
              "in": "query",
              "description": "Filter default categories",
              "schema": {
                "example": true,
                "type": "boolean"
              }
            },
            {
              "name": "isSystem",
              "required": false,
              "in": "query",
              "description": "Filter system categories",
              "schema": {
                "example": true,
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of categories."
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Get all categories",
          "tags": [
            "categories"
          ]
        }
      },
      "/api/v1/categories/{id}": {
        "get": {
          "operationId": "findOne",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "Category ID",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the category."
            },
            "404": {
              "description": "Category not found."
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Get a category by ID",
          "tags": [
            "categories"
          ]
        },
        "patch": {
          "operationId": "update",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "Category ID",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCategoryDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "The category has been successfully updated."
            },
            "400": {
              "description": "Invalid input data or system category."
            },
            "404": {
              "description": "Category not found."
            },
            "409": {
              "description": "Category with this name already exists."
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Update a category",
          "tags": [
            "categories"
          ]
        },
        "delete": {
          "operationId": "remove",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "Category ID",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The category has been successfully deleted."
            },
            "400": {
              "description": "Cannot delete: system category, default category, or has transactions."
            },
            "404": {
              "description": "Category not found."
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Delete a category",
          "tags": [
            "categories"
          ]
        }
      },
      "/api/v1/categories/types/all": {
        "get": {
          "operationId": "findAllTypes",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Returns a list of category types."
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Get all category types",
          "tags": [
            "categories"
          ]
        }
      },
      "/api/v1/categories/default/all": {
        "get": {
          "operationId": "findDefaultCategories",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Returns a list of default categories."
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Get all default categories",
          "tags": [
            "categories"
          ]
        }
      },
      "/api/v1/categories/system/all": {
        "get": {
          "operationId": "findSystemCategories",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Returns a list of system categories."
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Get all system categories",
          "tags": [
            "categories"
          ]
        }
      },
      "/api/v1/incomes": {
        "post": {
          "operationId": "create",
          "parameters": [],
          "responses": {
            "201": {
              "description": "Income created successfully."
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Create a new income",
          "tags": [
            "incomes"
          ]
        },
        "get": {
          "operationId": "findAll",
          "parameters": [
            {
              "name": "skip",
              "required": true,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "take",
              "required": true,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "categoryId",
              "required": true,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "startDate",
              "required": true,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "endDate",
              "required": true,
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of incomes."
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Get all incomes",
          "tags": [
            "incomes"
          ]
        }
      },
      "/api/v1/incomes/{id}": {
        "get": {
          "operationId": "findOne",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the income."
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Get an income by id",
          "tags": [
            "incomes"
          ]
        },
        "patch": {
          "operationId": "update",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Income updated successfully."
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Update an income",
          "tags": [
            "incomes"
          ]
        },
        "delete": {
          "operationId": "remove",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Income deleted successfully."
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Delete an income",
          "tags": [
            "incomes"
          ]
        }
      },
      "/api/v1/incomes/monthly/{year}/{month}": {
        "get": {
          "operationId": "getMonthlyTotal",
          "parameters": [
            {
              "name": "year",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "month",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the monthly total."
            }
          },
          "security": [
            {
              "JWT-auth": []
            }
          ],
          "summary": "Get monthly total income",
          "tags": [
            "incomes"
          ]
        }
      },
      "/api/v1/newsletter/subscribe": {
        "post": {
          "description": "Subscribe to the newsletter with optional preferences. If no preferences are provided, defaults to all types enabled.",
          "operationId": "subscribe",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewsletterPreferencesDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Successfully subscribed to newsletter"
            },
            "404": {
              "description": "User not found"
            }
          },
          "security": [
            {
              "bearer": []
            }
          ],
          "summary": "Subscribe to newsletter",
          "tags": [
            "Newsletter"
          ]
        }
      },
      "/api/v1/newsletter/unsubscribe": {
        "delete": {
          "description": "Unsubscribe from all newsletter types and set unsubscribe timestamp",
          "operationId": "unsubscribe",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Successfully unsubscribed from newsletter"
            },
            "404": {
              "description": "Subscription not found"
            }
          },
          "security": [
            {
              "bearer": []
            }
          ],
          "summary": "Unsubscribe from newsletter",
          "tags": [
            "Newsletter"
          ]
        }
      },
      "/api/v1/newsletter/preferences": {
        "put": {
          "description": "Update subscription preferences for different types of newsletters",
          "operationId": "updatePreferences",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewsletterPreferencesDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successfully updated preferences"
            },
            "404": {
              "description": "Subscription not found"
            }
          },
          "security": [
            {
              "bearer": []
            }
          ],
          "summary": "Update newsletter preferences",
          "tags": [
            "Newsletter"
          ]
        }
      },
      "/api/v1/newsletter/status": {
        "get": {
          "description": "Get current subscription status and preferences",
          "operationId": "getSubscriptionStatus",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Returns subscription status and preferences",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "isSubscribed": {
                        "type": "boolean"
                      },
                      "preferences": {
                        "type": "object",
                        "properties": {
                          "weeklyDigest": {
                            "type": "boolean"
                          },
                          "promotionalEmails": {
                            "type": "boolean"
                          },
                          "productUpdates": {
                            "type": "boolean"
                          }
                        }
                      },
                      "unsubscribedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "bearer": []
            }
          ],
          "summary": "Get newsletter subscription status",
          "tags": [
            "Newsletter"
          ]
        }
      },
      "/api/v1/newsletter/send": {
        "post": {
          "description": "Trigger sending of newsletter to all active subscribers. Super Admin only.",
          "operationId": "sendNewsletter",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Newsletter sending initiated"
            },
            "401": {
              "description": "Unauthorized - Invalid API key"
            },
            "403": {
              "description": "Forbidden - Super Admin only"
            },
            "429": {
              "description": "Too Many Requests"
            }
          },
          "security": [
            {
              "bearer": []
            },
            {
              "X-API-Key": []
            }
          ],
          "summary": "Send newsletter to all subscribers",
          "tags": [
            "Newsletter"
          ]
        }
      },
      "/api/v1/newsletter/check-inactive": {
        "post": {
          "description": "Send \"we miss you\" emails to users who have not logged in for over a month. Super Admin only.",
          "operationId": "checkInactiveUsers",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Inactive user check completed"
            },
            "401": {
              "description": "Unauthorized - Invalid API key"
            },
            "403": {
              "description": "Forbidden - Super Admin only"
            },
            "429": {
              "description": "Too Many Requests"
            }
          },
          "security": [
            {
              "bearer": []
            },
            {
              "X-API-Key": []
            }
          ],
          "summary": "Check and notify inactive users",
          "tags": [
            "Newsletter"
          ]
        }
      },
      "/api/v1": {
        "get": {
          "operationId": "getHello",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Application is running."
            }
          },
          "summary": "Health check endpoint",
          "tags": [
            "app"
          ]
        }
      }
    },
    "info": {
      "title": "CurioPay API",
      "description": "\n      The CurioPay API provides a comprehensive suite of endpoints for managing personal finances.\n      \n      ## Features\n      - User Authentication & Authorization\n      - Expense Management\n      - Income Tracking\n      - Category Management\n      - Multi-factor Authentication\n      - Data Export\n      - Newsletter Management\n      \n      ## Authentication\n      Most endpoints require JWT authentication. Include the JWT token in the Authorization header:\n      ```\n      Authorization: Bearer \u003Cyour_jwt_token\u003E\n      ```\n\n      ## Getting Started\n      1. Register a new account using POST /auth/register\n      2. Login using POST /auth/login to get your JWT token\n      3. Include the token in subsequent requests using the Authorization header\n      4. Token expires in 24 hours by default\n\n      ## Newsletter Operations\n      Some newsletter operations require an API key. Include it in the X-API-Key header:\n      ```\n      X-API-Key: your_api_key\n      ```\n    ",
      "version": "1.0",
      "contact": {
  
      }
    },
    "tags": [
      {
        "name": "auth",
        "description": "Authentication endpoints including login, register, and password reset"
      },
      {
        "name": "users",
        "description": "User management and profile operations"
      },
      {
        "name": "expenses",
        "description": "Expense tracking and management"
      },
      {
        "name": "incomes",
        "description": "Income tracking and management"
      },
      {
        "name": "categories",
        "description": "Category management for expenses and income"
      },
      {
        "name": "export",
        "description": "Data export functionality"
      },
      {
        "name": "newsletter",
        "description": "Newsletter subscription and preference management"
      }
    ],
    "servers": [],
    "components": {
      "securitySchemes": {
        "bearer": {
          "scheme": "bearer",
          "bearerFormat": "JWT",
          "type": "http"
        },
        "X-API-Key": {
          "type": "apiKey",
          "in": "header",
          "name": "X-API-Key"
        }
      },
      "schemas": {
        "RegisterDto": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "example": "user@example.com",
              "description": "User email address - must be a valid email format"
            },
            "password": {
              "type": "string",
              "example": "Tr0ub4dour&3",
              "description": "Password requirements:\n    - Must be between 8 and 64 characters\n    - Must be strong enough according to zxcvbn password strength estimator\n    - Should include a mix of letters, numbers, and symbols"
            },
            "firstName": {
              "type": "string",
              "example": "John",
              "description": "First name requirements:\n    - Must be between 2 and 50 characters\n    - Can only contain letters, accents, spaces, hyphens, and apostrophes"
            },
            "lastName": {
              "type": "string",
              "example": "Doe",
              "description": "Last name requirements:\n    - Must be between 2 and 50 characters\n    - Can only contain letters, accents, spaces, hyphens, and apostrophes"
            },
            "phone": {
              "type": "string",
              "example": "+1234567890",
              "description": "Phone number in international format (e.g., +1234567890)"
            }
          },
          "required": [
            "email",
            "password",
            "firstName",
            "lastName"
          ]
        },
        "UpdateUserRoleDto": {
          "type": "object",
          "properties": {
            "role": {
              "type": "string",
              "enum": [
                "USER",
                "ADMIN",
                "SUPER_ADMIN"
              ],
              "description": "User role",
              "example": "ADMIN"
            }
          },
          "required": [
            "role"
          ]
        },
        "UserProfileResponseDto": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            },
            "email": {
              "type": "string",
              "example": "john.doe@example.com"
            },
            "firstName": {
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "type": "string",
              "example": "Doe"
            },
            "role": {
              "type": "string",
              "example": "USER"
            },
            "isActive": {
              "type": "boolean",
              "example": true
            },
            "phone": {
              "type": "string",
              "example": "+1234567890"
            },
            "currencyId": {
              "type": "string",
              "example": "usd"
            },
            "languageId": {
              "type": "string",
              "example": "en"
            },
            "themeId": {
              "type": "string",
              "example": "light"
            },
            "lastLoginAt": {
              "format": "date-time",
              "type": "string",
              "example": "2024-03-20T12:00:00Z"
            },
            "createdAt": {
              "format": "date-time",
              "type": "string",
              "example": "2024-03-20T12:00:00Z"
            },
            "updatedAt": {
              "format": "date-time",
              "type": "string",
              "example": "2024-03-20T12:00:00Z"
            }
          },
          "required": [
            "id",
            "email",
            "firstName",
            "lastName",
            "role",
            "isActive",
            "phone",
            "currencyId",
            "languageId",
            "themeId",
            "lastLoginAt",
            "createdAt",
            "updatedAt"
          ]
        },
        "DeleteAccountDto": {
          "type": "object",
          "properties": {
            "currentPassword": {
              "type": "string",
              "description": "Current password to confirm account deletion",
              "example": "currentPassword123"
            },
            "confirm": {
              "type": "boolean",
              "description": "Confirmation that user wants to delete their account",
              "example": true
            }
          },
          "required": [
            "currentPassword",
            "confirm"
          ]
        },
        "LoginDto": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "example": "user@example.com",
              "description": "User email"
            },
            "password": {
              "type": "string",
              "example": "Password123!",
              "description": "User password"
            }
          },
          "required": [
            "email",
            "password"
          ]
        },
        "RequestPasswordResetDto": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "example": "user@example.com",
              "description": "Email address associated with your account"
            }
          },
          "required": [
            "email"
          ]
        },
        "ResetPasswordDto": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "description": "Password reset token received via email"
            },
            "newPassword": {
              "type": "string",
              "example": "Tr0ub4dour&3",
              "description": "New password requirements:\n    - Must be between 8 and 64 characters\n    - Must be strong enough according to zxcvbn password strength estimator\n    - Should include a mix of letters, numbers, and symbols"
            }
          },
          "required": [
            "token",
            "newPassword"
          ]
        },
        "EnableMfaDto": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "example": "123456",
              "description": "MFA verification code"
            }
          },
          "required": [
            "code"
          ]
        },
        "VerifyMfaDto": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "example": "123456",
              "description": "MFA verification code"
            }
          },
          "required": [
            "code"
          ]
        },
        "DisableMfaDto": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "example": "123456",
              "description": "MFA verification code"
            },
            "confirm": {
              "type": "boolean",
              "example": true,
              "description": "Confirm MFA disable action"
            }
          },
          "required": [
            "code",
            "confirm"
          ]
        },
        "i": {
          "type": "object",
          "properties": {
  
          }
        },
        "CreateExpenseDto": {
          "type": "object",
          "properties": {
            "date": {
              "format": "date-time",
              "type": "string",
              "example": "2023-05-15",
              "description": "Date when the expense occurred"
            },
            "description": {
              "type": "string",
              "example": "Grocery Shopping",
              "description": "Description of the expense"
            },
            "amount": {
              "example": 15000,
              "description": "Expense amount in cents (e.g., $150.00 = 15000)",
              "allOf": [
                {
                  "$ref": "#/components/schemas/i"
                }
              ]
            },
            "categoryId": {
              "type": "string",
              "example": "category-uuid",
              "description": "Category ID for the expense"
            },
            "paymentMethodId": {
              "type": "string",
              "example": "payment-method-uuid",
              "description": "Payment method ID (e.g., credit card, cash)"
            },
            "notes": {
              "type": "string",
              "example": "Monthly groceries including special items",
              "description": "Additional notes about the expense"
            }
          },
          "required": [
            "date",
            "description",
            "amount",
            "categoryId",
            "paymentMethodId"
          ]
        },
        "UpdateExpenseDto": {
          "type": "object",
          "properties": {
            "date": {
              "format": "date-time",
              "type": "string",
              "example": "2023-05-15",
              "description": "Date when the expense occurred"
            },
            "description": {
              "type": "string",
              "example": "Grocery Shopping",
              "description": "Description of the expense"
            },
            "amount": {
              "example": 15000,
              "description": "Expense amount in cents (e.g., $150.00 = 15000)",
              "allOf": [
                {
                  "$ref": "#/components/schemas/i"
                }
              ]
            },
            "categoryId": {
              "type": "string",
              "example": "category-uuid",
              "description": "Category ID for the expense"
            },
            "paymentMethodId": {
              "type": "string",
              "example": "payment-method-uuid",
              "description": "Payment method ID (e.g., credit card, cash)"
            },
            "notes": {
              "type": "string",
              "example": "Monthly groceries including special items",
              "description": "Additional notes about the expense"
            }
          }
        },
        "CreateCategoryDto": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Groceries",
              "description": "Name of the category",
              "minLength": 2,
              "maxLength": 50
            },
            "icon": {
              "type": "string",
              "example": "🛒",
              "description": "Emoji icon for the category"
            },
            "type": {
              "type": "string",
              "enum": [
                "INCOME",
                "EXPENSE"
              ],
              "example": "EXPENSE",
              "description": "Type of the category (INCOME or EXPENSE)"
            },
            "color": {
              "type": "string",
              "example": "#FF5733",
              "description": "Color code for the category (hex format)",
              "pattern": "^#[0-9A-Fa-f]{6}$"
            },
            "isDefault": {
              "type": "boolean",
              "example": false,
              "description": "Whether this is a default category",
              "default": false
            },
            "isSystem": {
              "type": "boolean",
              "example": false,
              "description": "Whether this is a system category",
              "default": false
            }
          },
          "required": [
            "name",
            "icon",
            "type"
          ]
        },
        "UpdateCategoryDto": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Groceries",
              "description": "Name of the category",
              "minLength": 2,
              "maxLength": 50
            },
            "icon": {
              "type": "string",
              "example": "🛒",
              "description": "Emoji icon for the category"
            },
            "type": {
              "type": "string",
              "enum": [
                "INCOME",
                "EXPENSE"
              ],
              "example": "EXPENSE",
              "description": "Type of the category (INCOME or EXPENSE)"
            },
            "color": {
              "type": "string",
              "example": "#FF5733",
              "description": "Color code for the category (hex format)",
              "pattern": "^#[0-9A-Fa-f]{6}$"
            },
            "isDefault": {
              "type": "boolean",
              "example": false,
              "description": "Whether this is a default category"
            }
          }
        },
        "NewsletterPreferencesDto": {
          "type": "object",
          "properties": {
            "weeklyDigest": {
              "type": "boolean",
              "description": "Receive weekly digest emails",
              "default": true
            },
            "promotionalEmails": {
              "type": "boolean",
              "description": "Receive promotional emails",
              "default": true
            },
            "productUpdates": {
              "type": "boolean",
              "description": "Receive product updates",
              "default": true
            }
          },
          "required": [
            "weeklyDigest",
            "promotionalEmails",
            "productUpdates"
          ]
        }
      }
    }
  }